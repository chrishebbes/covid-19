areaCode = "areaCode",
newCasesByPublishDate = "newCasesByPublishDate",
cumCasesByPublishDate = "cumCasesByPublishDate",
newDeaths28DaysByPublishDate = "newDeaths28DaysByPublishDate",
cumDeaths28DaysByPublishDate = "cumDeaths28DaysByPublishDate"
)
data <- get_data(
filters = query_filters,
structure = cases_and_deaths
)
frow1<-fluidRow(valueBoxOutput("value1"));
frow2<-fluidRow(box(plotOutput("plot1", height = 250)));
body<-dashboardBody(frow1,frow2);
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
body,
)
server <- function(input, output) {
output$plot1<-renderPlot({ggplot(data,aes(x=date,y=newCasesByPublishDate))+geom_point();})}
maxval<-max(data$newDeaths28DaysByPublishDate);
output$value1 <- renderValueBox({
valueBox(
formatC(maxval, format="d", big.mark=',')
,paste('Top Account:',sales.account$Account)
,icon = icon("stats",lib='glyphicon')
,color = "purple")
})
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(ukcovid19);
library(ggplot2)
library(tidyverse);
query_filters <- c(
'areaType=nation',
'areaName=England'
)
cases_and_deaths = list(
date = "date",
areaName = "areaName",
areaCode = "areaCode",
newCasesByPublishDate = "newCasesByPublishDate",
cumCasesByPublishDate = "cumCasesByPublishDate",
newDeaths28DaysByPublishDate = "newDeaths28DaysByPublishDate",
cumDeaths28DaysByPublishDate = "cumDeaths28DaysByPublishDate"
)
data <- get_data(
filters = query_filters,
structure = cases_and_deaths
)
frow1<-fluidRow(valueBoxOutput("value1"));
frow2<-fluidRow(box(plotOutput("plot1", height = 250)));
body<-dashboardBody(frow1,frow2);
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
body,
)
server <- function(input, output) {
output$plot1<-renderPlot({ggplot(data,aes(x=date,y=newCasesByPublishDate))+geom_point();})}
maxval<-max(data$newDeaths28DaysByPublishDate);
output$value1 <- renderValueBox({
valueBox(
formatC(maxval, format="d", big.mark=',')
,icon = icon("stats",lib='glyphicon')
,color = "purple")
})
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(ukcovid19);
library(ggplot2)
library(tidyverse);
query_filters <- c(
'areaType=nation',
'areaName=England'
)
cases_and_deaths = list(
date = "date",
areaName = "areaName",
areaCode = "areaCode",
newCasesByPublishDate = "newCasesByPublishDate",
cumCasesByPublishDate = "cumCasesByPublishDate",
newDeaths28DaysByPublishDate = "newDeaths28DaysByPublishDate",
cumDeaths28DaysByPublishDate = "cumDeaths28DaysByPublishDate"
)
data <- get_data(
filters = query_filters,
structure = cases_and_deaths
)
frow1<-fluidRow(valueBoxOutput("value1"));
frow2<-fluidRow(box(plotOutput("plot1", height = 250)));
body<-dashboardBody(frow1,frow2);
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
body,
)
server <- function(input, output) {
output$plot1<-renderPlot({ggplot(data,aes(x=date,y=newCasesByPublishDate))+geom_point();})}
maxval<-max(data$newDeaths28DaysByPublishDate);
output$value1 <- renderValueBox({
valueBox(
formatC(2, format="d", big.mark=',')
,icon = icon("stats",lib='glyphicon')
,color = "purple")
})
shinyApp(ui, server)
output$value1 <- renderValueBox({valueBox(formatC(2, format="d", big.mark=','),icon = icon("stats",lib='glyphicon'),color = "purple")});
output$value1 <- renderValueBox({valueBox(1,2,icon = icon("stats",lib='glyphicon'),color = "purple")});
output$value1 <- renderValueBox({valueBox(1,"2"Test",icon = icon("stats",lib='glyphicon'),color = "purple")});
output$value1 <- renderValueBox({valueBox(1,"Test",icon = icon("stats",lib='glyphicon'),color = "purple")});
output$value1 <- renderValueBox({valueBox(1,"Test",icon = icon("stats",lib='glyphicon'),color = "purple")})
output$value1<-renderValueBox({
valueBox(
1, "Test", icon = icon("list"),
color = "purple"
)
})
library(shiny)
library(shinydashboard)
library(ukcovid19);
library(ggplot2)
library(tidyverse);
query_filters <- c(
'areaType=nation',
'areaName=England'
)
cases_and_deaths = list(
date = "date",
areaName = "areaName",
areaCode = "areaCode",
newCasesByPublishDate = "newCasesByPublishDate",
cumCasesByPublishDate = "cumCasesByPublishDate",
newDeaths28DaysByPublishDate = "newDeaths28DaysByPublishDate",
cumDeaths28DaysByPublishDate = "cumDeaths28DaysByPublishDate"
)
data <- get_data(
filters = query_filters,
structure = cases_and_deaths
)
frow1<-fluidRow(valueBoxOutput("value1"));
frow2<-fluidRow(box(plotOutput("plot1", height = 250)));
body<-dashboardBody(frow1,frow2);
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
body,
)
server <- function(input, output) {
output$plot1<-renderPlot({ggplot(data,aes(x=date,y=newCasesByPublishDate))+geom_point();})
maxval<-max(data$newDeaths28DaysByPublishDate);
output$value1<-renderValueBox({
valueBox(
1, "Test", icon = icon("list"),
color = "purple"
)
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(ukcovid19);
library(ggplot2)
library(tidyverse);
query_filters <- c(
'areaType=nation',
'areaName=England'
)
cases_and_deaths = list(
date = "date",
areaName = "areaName",
areaCode = "areaCode",
newCasesByPublishDate = "newCasesByPublishDate",
cumCasesByPublishDate = "cumCasesByPublishDate",
newDeaths28DaysByPublishDate = "newDeaths28DaysByPublishDate",
cumDeaths28DaysByPublishDate = "cumDeaths28DaysByPublishDate"
)
data <- get_data(
filters = query_filters,
structure = cases_and_deaths
)
frow1<-fluidRow(valueBoxOutput("value1"));
frow2<-fluidRow(box(plotOutput("plot1", height = 250)));
body<-dashboardBody(frow1,frow2);
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
body,
)
server <- function(input, output) {
output$plot1<-renderPlot({ggplot(data,aes(x=date,y=newCasesByPublishDate))+geom_point();})
maxval<-max(data$newDeaths28DaysByPublishDate);
output$value1<-renderValueBox({
valueBox(
maxval, "New Deaths", icon = icon("list"),
color = "purple"
)
})
}
shinyApp(ui, server)
View(data)
dailyval<-data$newDeaths28DaysByPublishDate[1];
library(shiny)
library(shinydashboard)
library(ukcovid19);
library(ggplot2)
library(tidyverse);
query_filters <- c(
'areaType=nation',
'areaName=England'
)
cases_and_deaths = list(
date = "date",
areaName = "areaName",
areaCode = "areaCode",
newCasesByPublishDate = "newCasesByPublishDate",
cumCasesByPublishDate = "cumCasesByPublishDate",
newDeaths28DaysByPublishDate = "newDeaths28DaysByPublishDate",
cumDeaths28DaysByPublishDate = "cumDeaths28DaysByPublishDate"
)
data <- get_data(
filters = query_filters,
structure = cases_and_deaths
)
frow1<-fluidRow(valueBoxOutput("value1"));
frow2<-fluidRow(box(plotOutput("plot1", height = 250)));
body<-dashboardBody(frow1,frow2);
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
body,
)
server <- function(input, output) {
output$plot1<-renderPlot({ggplot(data,aes(x=date,y=newCasesByPublishDate))+geom_point();})
dailyval<-data$newDeaths28DaysByPublishDate[1];
output$value1<-renderValueBox({
valueBox(
maxval, "Daily Deaths", icon = icon("list"),
color = "red"
)
})
}
shinyApp(ui, server)
newcase<-data$newCasesByPublishDate[1];
library(shiny)
library(shinydashboard)
library(ukcovid19);
library(ggplot2)
library(tidyverse);
query_filters <- c(
'areaType=nation',
'areaName=England'
)
cases_and_deaths = list(
date = "date",
areaName = "areaName",
areaCode = "areaCode",
newCasesByPublishDate = "newCasesByPublishDate",
cumCasesByPublishDate = "cumCasesByPublishDate",
newDeaths28DaysByPublishDate = "newDeaths28DaysByPublishDate",
cumDeaths28DaysByPublishDate = "cumDeaths28DaysByPublishDate"
)
data <- get_data(
filters = query_filters,
structure = cases_and_deaths
)
frow1<-fluidRow(valueBoxOutput("value1"),valueBoxOutput("value2"));
frow2<-fluidRow(box(plotOutput("plot1", height = 250)));
body<-dashboardBody(frow1,frow2);
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
body,
)
server <- function(input, output) {
output$plot1<-renderPlot({ggplot(data,aes(x=date,y=newCasesByPublishDate))+geom_point();})
dailyval<-data$newDeaths28DaysByPublishDate[1];
newcase<-data$newCasesByPublishDate[1];
output$value1<-renderValueBox({
valueBox(
dailyval, "Daily Deaths", icon = icon("list"),
color = "red"
)
})
output$value2<-renderValueBox({
valueBox(
newcase, "New Cases", icon = icon("list"),
color = "red"
)
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(ukcovid19);
library(ggplot2)
library(tidyverse);
query_filters <- c(
'areaType=nation',
'areaName=England'
)
cases_and_deaths = list(
date = "date",
areaName = "areaName",
areaCode = "areaCode",
newCasesByPublishDate = "newCasesByPublishDate",
cumCasesByPublishDate = "cumCasesByPublishDate",
newDeaths28DaysByPublishDate = "newDeaths28DaysByPublishDate",
cumDeaths28DaysByPublishDate = "cumDeaths28DaysByPublishDate"
)
data <- get_data(
filters = query_filters,
structure = cases_and_deaths
)
frow1<-fluidRow(valueBoxOutput("value1"),valueBoxOutput("value2"));
frow2<-fluidRow(box(plotOutput("plot1", height = 250)));
body<-dashboardBody(frow1,frow2);
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
body,
)
server <- function(input, output) {
output$plot1<-renderPlot({ggplot(data,aes(x=date,y=newCasesByPublishDate))+geom_point();})
dailyval<-data$newDeaths28DaysByPublishDate[1];
newcase<-data$newCasesByPublishDate[1];
output$value1<-renderValueBox({
valueBox(
dailyval, "Daily Deaths", icon = icon("skull-crossbones"),
color = "red"
)
})
output$value2<-renderValueBox({
valueBox(
newcase, "New Cases", icon = icon("list"),
color = "red"
)
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(ukcovid19);
library(ggplot2)
library(tidyverse);
query_filters <- c(
'areaType=nation',
'areaName=England'
)
cases_and_deaths = list(
date = "date",
areaName = "areaName",
areaCode = "areaCode",
newCasesByPublishDate = "newCasesByPublishDate",
cumCasesByPublishDate = "cumCasesByPublishDate",
newDeaths28DaysByPublishDate = "newDeaths28DaysByPublishDate",
cumDeaths28DaysByPublishDate = "cumDeaths28DaysByPublishDate"
)
data <- get_data(
filters = query_filters,
structure = cases_and_deaths
)
frow1<-fluidRow(valueBoxOutput("value1"),valueBoxOutput("value2"));
frow2<-fluidRow(box(plotOutput("plot1", height = 250)));
body<-dashboardBody(frow1,frow2);
ui <- dashboardPage(
dashboardHeader(),
body,
)
server <- function(input, output) {
output$plot1<-renderPlot({ggplot(data,aes(x=date,y=newCasesByPublishDate))+geom_point();})
dailyval<-data$newDeaths28DaysByPublishDate[1];
newcase<-data$newCasesByPublishDate[1];
output$value1<-renderValueBox({
valueBox(
dailyval, "Daily Deaths", icon = icon("skull-crossbones"),
color = "red"
)
})
output$value2<-renderValueBox({
valueBox(
newcase, "New Cases", icon = icon("stethoscope"),
color = "blue"
)
})
}
shinyApp(ui, server)
devtools::install_github("publichealthengland/coronavirus-dashboard-api-R-sdk");
library(shiny)
library(shinydashboard)
library(ukcovid19);
library(ggplot2)
library(tidyverse);
query_filters <- c(
'areaType=nation',
'areaName=England'
)
cases_and_deaths = list(
date = "date",
areaName = "areaName",
areaCode = "areaCode",
newCasesByPublishDate = "newCasesByPublishDate",
cumCasesByPublishDate = "cumCasesByPublishDate",
newDeaths28DaysByPublishDate = "newDeaths28DaysByPublishDate",
cumDeaths28DaysByPublishDate = "cumDeaths28DaysByPublishDate"
)
data <- get_data(
filters = query_filters,
structure = cases_and_deaths
)
frow1<-fluidRow(valueBoxOutput("value1"),valueBoxOutput("value2"));
frow2<-fluidRow(box(plotOutput("plot1", height = 250)));
body<-dashboardBody(frow1,frow2);
ui <- dashboardPage(
dashboardHeader(),
body,
)
server <- function(input, output) {
output$plot1<-renderPlot({ggplot(data,aes(x=date,y=newCasesByPublishDate))+geom_point();})
dailyval<-data$newDeaths28DaysByPublishDate[1];
newcase<-data$newCasesByPublishDate[1];
output$value1<-renderValueBox({
valueBox(
dailyval, "Daily Deaths", icon = icon("skull-crossbones"),
color = "red"
)
})
output$value2<-renderValueBox({
valueBox(
newcase, "New Cases", icon = icon("stethoscope"),
color = "blue"
)
})
}
shinyApp(ui, server)
devtools::install_github("publichealthengland/coronavirus-dashboard-api-R-sdk");
library(shiny)
library(shinydashboard)
library(ukcovid19);
library(ggplot2)
library(tidyverse);
query_filters <- c(
'areaType=nation',
'areaName=England'
)
cases_and_deaths = list(
date = "date",
areaName = "areaName",
areaCode = "areaCode",
newCasesByPublishDate = "newCasesByPublishDate",
cumCasesByPublishDate = "cumCasesByPublishDate",
newDeaths28DaysByPublishDate = "newDeaths28DaysByPublishDate",
cumDeaths28DaysByPublishDate = "cumDeaths28DaysByPublishDate"
)
data <- get_data(
filters = query_filters,
structure = cases_and_deaths
)
frow1<-fluidRow(valueBoxOutput("value1"),valueBoxOutput("value2"));
frow2<-fluidRow(box(plotOutput("plot1", height = 250)));
body<-dashboardBody(frow1,frow2);
ui <- dashboardPage(
dashboardHeader(),
body,
)
server <- function(input, output) {
output$plot1<-renderPlot({ggplot(data,aes(x=date,y=newCasesByPublishDate))+geom_point();})
dailyval<-data$newDeaths28DaysByPublishDate[1];
newcase<-data$newCasesByPublishDate[1];
output$value1<-renderValueBox({
valueBox(
dailyval, "Daily Deaths", icon = icon("skull-crossbones"),
color = "red"
)
})
output$value2<-renderValueBox({
valueBox(
newcase, "New Cases", icon = icon("stethoscope"),
color = "blue"
)
})
}
shinyApp(ui, server)
shiny::runApp('covid')
runApp('covid')
runApp('covid')
runApp('covid')
runApp('covid')
runApp('covid')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(devtools);
runApp('covid')
runApp('covid')
runApp()
runApp('covid')
runApp()
runApp('covid')
runApp('covid')
runApp('covid')
runApp('covid')
data<-data %>% mutate(ymddate=parse_date(date,"%Y-%m-%d"));
View(data)
runApp('covid')
